{"version":3,"sources":["@traceur/generated/TemplateParser/5","src/core/compiler/shadow_dom_emulation/shim_css.js","@traceur/generated/TemplateParser/14","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","src/core/compiler/shadow_dom_emulation/@traceur/generated/TemplateParser/2","src/core/compiler/shadow_dom_emulation/@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/10","src/core/compiler/shadow_dom_emulation/@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/15"],"names":[],"mappings":"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","file":"src/core/compiler/shadow_dom_emulation/shim_css.js","sourceRoot":"/Users/adam/Git/ionic-angular2/node_modules/angular2/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {StringWrapper, RegExpWrapper, isPresent, BaseException, int} from 'angular2/src/facade/lang';\nimport {List, ListWrapper} from 'angular2/src/facade/collection';\n\nexport function shimCssText(css: string, tag: string) {\n  return new CssShim(tag).shimCssText(css);\n}\n\nvar _HOST_RE = RegExpWrapper.create(':host', 'i');\nvar _HOST_TOKEN = '-host-element';\nvar _HOST_TOKEN_RE = RegExpWrapper.create('-host-element');\nvar _PAREN_SUFFIX = ')(?:\\\\((' +\n                    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n                    ')\\\\))?([^,{]*)';\nvar _COLON_HOST_RE = RegExpWrapper.create(`(${_HOST_TOKEN}${_PAREN_SUFFIX}`, 'im');\n\nvar _POLYFILL_NON_STRICT = 'polyfill-non-strict';\nvar _POLYFILL_UNSCOPED_NEXT_SELECTOR = 'polyfill-unscoped-next-selector';\nvar _POLYFILL_NEXT_SELECTOR = 'polyfill-next-selector';\nvar _CONTENT_RE = RegExpWrapper.create('[^}]*content:[\\\\s]*[\\'\"](.*?)[\\'\"][;\\\\s]*[^}]*}', 'im');\nvar _COMBINATORS = [\n  RegExpWrapper.create('/shadow/', 'i'),\n  RegExpWrapper.create('/shadow-deep/', 'i'),\n  RegExpWrapper.create('::shadow', 'i'),\n  RegExpWrapper.create('/deep/', 'i'),\n];\nvar _COLON_SELECTORS = RegExpWrapper.create('(' + _HOST_TOKEN + ')(\\\\(.*\\\\))?(.*)', 'i');\nvar _SELECTOR_SPLITS = [' ', '>', '+', '~'];\nvar _SIMPLE_SELECTORS = RegExpWrapper.create('([^:]*)(:*)(.*)', 'i');\nvar _IS_SELECTORS = RegExpWrapper.create('\\\\[is=[\\'\"]([^\\\\]]*)[\\'\"]\\\\]', 'i');\n\nvar _$EOF = 0;\nvar _$LBRACE = 123;\nvar _$RBRACE = 125;\nvar _$TAB = 9;\nvar _$SPACE = 32;\nvar _$NBSP = 160;\n\nexport class CssShim {\n  _tag: string;\n  _attr: string;\n\n  constructor(tag: string) {\n    this._tag = tag;\n    this._attr = `[${tag}]`;\n  }\n\n  shimCssText(css: string): string {\n    var preprocessed = this.convertColonHost(css);\n    var rules = this.cssToRules(preprocessed);\n    return this.scopeRules(rules);\n  }\n\n  convertColonHost(css: string):string {\n    css = StringWrapper.replaceAll(css, _HOST_RE, _HOST_TOKEN);\n\n    var partReplacer = function(host, part, suffix) {\n      part = StringWrapper.replaceAll(part, _HOST_TOKEN_RE, '');\n      return `${host}${part}${suffix}`;\n    }\n\n    return StringWrapper.replaceAllMapped(css, _COLON_HOST_RE, function(m) {\n      var base = _HOST_TOKEN;\n      var inParens = m[2];\n      var rest = m[3];\n\n      if (isPresent(inParens)) {\n        var srcParts = inParens.split(',');\n        var dstParts = [];\n\n        for (var i = 0; i < srcParts.length; i++) {\n          var part = srcParts[i].trim();\n          if (part.length > 0) {\n            ListWrapper.push(dstParts, partReplacer(base, part, rest));\n          }\n        }\n\n        return ListWrapper.join(dstParts, ',');\n      } else {\n        return `${base}${rest}`;\n      }\n    });\n  }\n\n  cssToRules(css: string): List<_Rule> {\n    return new _Parser(css).parse();\n  }\n\n  scopeRules(rules: List<_Rule>): string {\n    var scopedRules = [];\n    var prevRule = null;\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      if (isPresent(prevRule) &&\n          prevRule.selectorText == _POLYFILL_NON_STRICT) {\n        ListWrapper.push(scopedRules, this.scopeNonStrictMode(rule));\n\n      } else if (isPresent(prevRule) &&\n                 prevRule.selectorText == _POLYFILL_UNSCOPED_NEXT_SELECTOR) {\n        var content = this.extractContent(prevRule);\n        var r = new _Rule(content, rule.body, null);\n        ListWrapper.push(scopedRules, this.ruleToString(r));\n\n      } else if (isPresent(prevRule) &&\n                 prevRule.selectorText == _POLYFILL_NEXT_SELECTOR) {\n\n        var content = this.extractContent(prevRule);\n        var r = new _Rule(content, rule.body, null);\n        ListWrapper.push(scopedRules, this.scopeStrictMode(r))\n\n      } else if (rule.selectorText != _POLYFILL_NON_STRICT &&\n                 rule.selectorText != _POLYFILL_UNSCOPED_NEXT_SELECTOR &&\n                 rule.selectorText != _POLYFILL_NEXT_SELECTOR) {\n        ListWrapper.push(scopedRules, this.scopeStrictMode(rule));\n      }\n      prevRule = rule;\n    }\n\n    return ListWrapper.join(scopedRules, '\\n');\n  }\n\n  extractContent(rule: _Rule): string {\n    var match = RegExpWrapper.firstMatch(_CONTENT_RE, rule.body);\n    return isPresent(match) ? match[1] : '';\n  }\n\n  ruleToString(rule: _Rule): string {\n    return `${rule.selectorText} ${rule.body}`;\n  }\n\n  scopeStrictMode(rule: _Rule): string {\n    if (rule.hasNestedRules()) {\n      var selector = rule.selectorText;\n      var rules = this.scopeRules(rule.rules);\n      return `${selector} {\\n${rules}\\n}`;\n    }\n\n    var scopedSelector = this.scopeSelector(rule.selectorText, true);\n    var scopedBody = rule.body;\n    return `${scopedSelector} ${scopedBody}`;\n  }\n\n  scopeNonStrictMode(rule: _Rule): string {\n    var scopedSelector = this.scopeSelector(rule.selectorText, false);\n    var scopedBody = rule.body;\n    return `${scopedSelector} ${scopedBody}`;\n  }\n\n  scopeSelector(selector: string, strict: boolean) {\n    var parts = this.replaceCombinators(selector).split(',');\n    var scopedParts = [];\n    for (var i = 0; i < parts.length; i++) {\n      var part = parts[i];\n      var sel = this.scopeSimpleSelector(part.trim(), strict);\n      ListWrapper.push(scopedParts, sel)\n    }\n    return ListWrapper.join(scopedParts, ', ');\n  }\n\n  replaceCombinators(selector: string): string {\n    for (var i = 0; i < _COMBINATORS.length; i++) {\n      var combinator = _COMBINATORS[i];\n      selector = StringWrapper.replaceAll(selector, combinator, '');\n    }\n\n    return selector;\n  }\n\n  scopeSimpleSelector(selector: string, strict: boolean) {\n    if (StringWrapper.contains(selector, _HOST_TOKEN)) {\n      return this.replaceColonSelectors(selector);\n    } else if (strict) {\n      return this.insertTagToEverySelectorPart(selector);\n    } else {\n      return `${this._tag} ${selector}`;\n    }\n  }\n\n  replaceColonSelectors(css: string): string {\n    return StringWrapper.replaceAllMapped(css, _COLON_SELECTORS, (m) => {\n      var selectorInParens;\n      if (isPresent(m[2])) {\n        var len = selectorInParens.length;\n        selectorInParens = StringWrapper.substring(selectorInParens, 1, len - 1);\n      } else {\n        selectorInParens = '';\n      }\n      var rest = m[3];\n      return `${this._tag}${selectorInParens}${rest}`;\n    });\n  }\n\n  insertTagToEverySelectorPart(selector: string): string {\n    selector = this.handleIsSelector(selector);\n\n    for (var i = 0; i < _SELECTOR_SPLITS.length; i++) {\n      var split = _SELECTOR_SPLITS[i];\n      var parts = selector.split(split);\n      for (var j = 0; j < parts.length; j++) {\n        parts[j] = this.insertAttrSuffixIntoSelectorPart(parts[j].trim());\n      }\n      selector = parts.join(split);\n    }\n    return selector;\n  }\n\n  insertAttrSuffixIntoSelectorPart(p: string): string {\n    var shouldInsert = p.length > 0 &&\n                       !ListWrapper.contains(_SELECTOR_SPLITS, p) &&\n                       !StringWrapper.contains(p, this._attr);\n    return shouldInsert ? this.insertAttr(p) : p;\n  }\n\n  insertAttr(selector: string): string {\n    return StringWrapper.replaceAllMapped(selector, _SIMPLE_SELECTORS, (m) => {\n      var basePart = m[1];\n      var colonPart = m[2];\n      var rest = m[3];\n      return (m[0].length > 0) ? `${basePart}${this._attr}${colonPart}${rest}` : '';\n    });\n  }\n\n  handleIsSelector(selector: string) {\n    return StringWrapper.replaceAllMapped(selector, _IS_SELECTORS, function(m) {\n      return m[1];\n    });\n  }\n}\n\nclass _Token {\n  string: string;\n  type: string;\n\n  constructor(string: string, type: string) {\n    this.string = string;\n    this.type = type;\n  }\n}\n\nvar _EOF_TOKEN = new _Token(null, null);\n\nclass _Lexer {\n  peek: int;\n  index: int;\n  input: string;\n  length: int;\n\n  constructor(input: string) {\n    this.input = input;\n    this.length = input.length;\n    this.index = -1;\n    this.advance();\n  }\n\n  parse(): List<_Token> {\n    var tokens = [];\n    var token = this.scanToken();\n    while (token !== _EOF_TOKEN) {\n      ListWrapper.push(tokens, token);\n      token = this.scanToken();\n    }\n    return tokens;\n  }\n\n  scanToken(): _Token {\n    this.skipWhitespace();\n    if (this.peek === _$EOF) return _EOF_TOKEN;\n    if (this.isBodyEnd(this.peek)) {\n      this.advance();\n      return new _Token('}', 'rparen');\n    }\n    if (this.isMedia(this.peek)) return this.scanMedia();\n    if (this.isSelector(this.peek)) return this.scanSelector();\n    if (this.isBodyStart(this.peek)) return this.scanBody();\n\n    return _EOF_TOKEN;\n  }\n\n  isSelector(v: int): boolean {\n    return !this.isBodyStart(v) && v !== _$EOF;\n  }\n\n  isBodyStart(v: int): boolean {\n    return v === _$LBRACE;\n  }\n\n  isBodyEnd(v: int): boolean {\n    return v === _$RBRACE;\n  }\n\n  isMedia(v: int): boolean {\n    return v === 64; // @ -> 64\n  }\n\n  isWhitespace(v: int): boolean {\n    return (v >= _$TAB && v <= _$SPACE) || (v == _$NBSP)\n  }\n\n  skipWhitespace() {\n    while (this.isWhitespace(this.peek)) {\n      if (++this.index >= this.length) {\n        this.peek = _$EOF;\n        return;\n      } else {\n        this.peek = StringWrapper.charCodeAt(this.input, this.index);\n      }\n    }\n  }\n\n  scanSelector(): _Token {\n    var start = this.index;\n    this.advance();\n    while (this.isSelector(this.peek)) {\n      this.advance();\n    }\n    var selector = StringWrapper.substring(this.input, start, this.index);\n    return new _Token(selector.trim(), 'selector');\n  }\n\n  scanBody(): _Token {\n    var start = this.index;\n    this.advance();\n    while (!this.isBodyEnd(this.peek)) {\n      this.advance();\n    }\n    this.advance();\n    var body = StringWrapper.substring(this.input, start, this.index);\n    return new _Token(body, 'body');\n  }\n\n  scanMedia(): _Token {\n    var start = this.index;\n    this.advance();\n    while (!this.isBodyStart(this.peek)) {\n      this.advance();\n    }\n    var media = StringWrapper.substring(this.input, start, this.index);\n    this.advance(); // skip \"{\"\n    return new _Token(media, 'media');\n  }\n\n  advance() {\n    this.index++;\n    if (this.index >= this.length) {\n      this.peek = _$EOF;\n    } else {\n      this.peek = StringWrapper.charCodeAt(this.input, this.index);\n    }\n  }\n}\n\nclass _Parser {\n  tokens: List<_Token>;\n  currentIndex: int;\n\n  constructor(input: string) {\n    this.tokens = new _Lexer(input).parse();\n    this.currentIndex = -1;\n  }\n\n  parse(): List<_Rule> {\n    var rules = [];\n    var rule;\n    while (isPresent(rule = this.parseRule())) {\n      ListWrapper.push(rules, rule);\n    }\n    return rules;\n  }\n\n  parseRule(): _Rule {\n    try {\n      if (this.getNext().type === 'media') {\n        return this.parseMedia();\n      } else {\n        return this.parseCssRule();\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  parseMedia(): _Rule {\n    this.advance('media');\n    var media = this.getCurrent().string;\n    var rules = [];\n    while (this.getNext().type !== 'rparen') {\n      ListWrapper.push(rules, this.parseCssRule());\n    }\n    this.advance('rparen');\n    return new _Rule(media.trim(), null, rules);\n  }\n\n  parseCssRule() {\n    this.advance('selector');\n    var selector = this.getCurrent().string;\n    this.advance('body');\n    var body = this.getCurrent().string;\n    return new _Rule(selector, body, null);\n  }\n\n  advance(expected: string) {\n    this.currentIndex++;\n    if (this.getCurrent().type !== expected) {\n      throw new BaseException(`Unexpected token \"${this.getCurrent().type}\". Expected \"${expected}\"`);\n    }\n  }\n\n  getNext(): _Token {\n    return this.tokens[this.currentIndex + 1];\n  }\n\n  getCurrent(): _Token {\n    return this.tokens[this.currentIndex];\n  }\n}\n\nexport class _Rule {\n  selectorText: string;\n  body: string;\n  rules: List<_Rule>;\n\n  constructor(selectorText: string, body: string, rules: List<_Rule>) {\n    this.selectorText = selectorText;\n    this.body = body;\n    this.rules = rules;\n  }\n\n  hasNestedRules() {\n    return isPresent(this.rules);\n  }\n}\n","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","assert.genericType($__placeholder__0)","$__placeholder__0 = $__placeholder__1"]}