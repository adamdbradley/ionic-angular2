{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/src/change_detection/change_detection_jit_generator.es6","angular2/src/change_detection/@traceur/generated/TemplateParser/10","angular2/src/change_detection/@traceur/generated/TemplateParser/7","angular2/src/change_detection/change_detection_jit_generator.js","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","angular2/src/change_detection/@traceur/generated/TemplateParser/311"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,+LAAoB,UAAS,SAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkGpD,SAAS,aAAW,CAAE,IAAG,CAAU,CAAA,IAAG,CAAU,CAAA,aAAmB,CAAG,CAAA,UAAgB,CAAU;AAC9F,WAAO,IAST,EAAA,KAAA,EAAA,KAAA,EAAA,cC5GK,EAAA,KACqB,EAAA,WAAA,ECD1B,gEF+GS,EAAA,KACH,EAAA,yCAUN,EAAA;ECzH0B;AAAA,ADiI1B,SAAA,oBAAA,CAAA,IAAA,CAAA,CAAA,iBAAA,CAAA;AAAA,WClIK,QACqB,EAAA,KAAA,EAAA,eCDhB,EAAA,KAAA,EAAA,uCCgDT,EF/CiD,yBAAG,EAAA,iBDmIrD,EAAA,oBAAS,EAAA,mBACP,EAAA,oBACG,EAAA,mBAIL,EAAA,gBAAA,EAAA,eAAA,EAAA,kBC1IK,EAAA,UD6IL,EAAA,KAAA,EAAA,8BAAsB,EAAA,yBAAmD,EAAA,iBACvE,EAAA;EAUF;AAAA,AAEA,SAAS,mBAAe,CAAI,IAAgB,CAAA;AAC1C,WAAQ,IAOV,EAAA,KAAA,EAAA,8EGhGA,EAAC;EHmGD;AAAA,ACpK0B,SAAA,sBCDhB,CAAA,IAAV,CAAA,CAAA,IAAK,CAAA;ADC6C,WAAG,IDgLrD,EAAA,KAAA,EAAA,oEACE,EAAA,KAAO,EAAA,QAST,EAEA;EACE;AAAA,AG7GF,SFhFqD,aAAA,CAAA,gBAAA,CAAA,CAAA,iBAAA,CAAA,CAAA,OAAA,CAAA;ADgMrD,WAAS,IACP,EAAA,iBACA,EAAA,KAOF,EAAA,kBAAA,EAAA,SC1MK,EAAA,WAAA,EAAA,UACqB,EAAA,aCD1B,EAAK,UDCgD,EAAA,cAAA,EAAA,wCD6MrD,EAAA,QAAA,EAAA,KC9MA,ED8MA;EC7M0B;AAAA,ADiN1B,SAAA,eAAA,CAAA,KAAA,CAAA;AAAA,WClNK,QACqB,EAAA,cD+MkB,EC/MK,OAAA,EAAA,cAAA,EAAA,uCAAI,EAAA,KAAA,EAAA,kBAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAA,cAAA,EAAA,YDmNrD,EAAA,oBAAS,EAAA,mBAA4C,EAAA,gBAAA,EAAA,IAAA,EAAA,MAAA,EAAA,uBAAA,EAAA,cAAA,EAAA,SACnD,EAAA,cAAW,EAAK,gBAClB,EAAA;ECrN0B;AAAA,ADyNxB,SAAO,wBAEL,CAAG,SAEN,CAAA,CAAA,KAAA,CAAA,CAAA,OAAA,CAAA,CAAA,MAAA,CAAA;AACD,WAAA,IAAA,EAAA,aC/NK,EAAA,MAAA,EAAe,KAAC,EAAA,oBAAA,EAAA,MAAA,EAAA,KAAA,EAAA,QACZ,EAAA,WAAiB,EAAA,aDuNqB,EAAA,UCvNI,EAAC,cAAC,EAAA,MAAA,EAAA,KAAA,EAAA,cAAA,EAAA,cAAA,EAAA,UDgOrD,EAAA,KAAS,EAAA,iBAAA,EAAA,gBAA8B,EAAA,IAAA,EAAA,UAAmB,EAAA,qBAAkC,EAAA,aAAA,EAAA,UAC1F,EAAA,MAAO,EAAA,MAAG,EAAA,aAAY,EAAA,sBAExB,EAAA,OCpOK,EAAA,KACqB,EAAA;EEqH1B;AAAA,AH0HI,SAAG,uBAAmB,CAAA,UAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,CAAA,MAAA,CAAA,CAAA,SAAA,CAAA,CAAA,MAAA,CAAA;AAEtB,WAAG,IACH,EAAA,WAAG,EAAA,SACH,EAAA,SAAG,EAAA,QAAe,EAAA,SAAG,EAAA,QAAA,EAAA,SAAmB,EAAA,QAAA,EAAA,SAAa,EAAA,SAAA,EAAA,SAAA,EAAA,QAAA,EAAA,SAAA,EAAA,WACvD,EAAA,OAAA,EAAA,eAEA,EAAA,UAAA,EAAA,OACM,EAAA,SAAA,EAAI,MAAK,EAAA,SAAA,EAAA,SAEP,EAAA,OAAA,EAAA,KACJ,EAAA;EGvHN;AAAA,AHyHI,SAAO,mBAAU,CAAO,KAAE,CAAK,CAAA,KAAC,CAAA;AAClC,WAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,IAAA,EAAA;EAEA;AAAA,AAKE,SAAO,qBAAgB,CAAA,IAAM,CAAA,CAAA,OAAQ,CAAI,CAAA,QAAA,CAAA;AAC3C,WAAA,IAGA,EAAA,WAAoB,EAAA,MAAA,EAAA,KAAA,EAAA,kBAAA,EAAA,KAAA,EAAA,OAAA,EAAA,QAAA,EAAA,WACd,EAAA,WAAO,EAAA,iDACX,EAAA,SAAO,EAAA,MAAI,EAAA,WAAS,EAAA,SAAA,EAAA,KAAA,EAAA,oBAGtB,EAAA,SAAA,EAAA,MAAwB,EAAA,WAAA,EAAA,IAAA,EAAA,KAAA,EAAA,SG3H1B,EAAC;EH+HC;AAAA,AAKE,SAAI,yBAAqB,CAAA,KAAA;AACzB,SAAO,CAAA,KAAA,IAAA,EAAA,SAAA,CAAA;aAAA,MAAsB,EAAA,EAAA,EAAA,IAAG;IAAA,EAAA,KAAA,CAAA,IAAY,CAAA,CAAA;EG9HhD;AAIA,SHgIE,0BAAA,CAAA,KAAA;AAEA,SAAA,CAAA,KAAA,IAAA,EAAA,SAAkB,CAAA;aAAW,MAAA,EAAA,EAAA,EAAA,YAAA;IAAA,EAAA,KAAA,CAAA,IAAA,CAAA,CAAA;EAC3B;AG7HJ,SHkIE,yBAAA,CAAA,KAAA;AAEA,SAAA,CAAA,KAAgC,IAAA,EAAA,SAAA,CAAA;aAAA,CAAA,EAAA,MAAA,EAAA,KAAA,EAAA,kBAAA;IAAA,EAAA,KAAA,CAAA,IAAA,CAAA,CAAA;EAC9B;AG/HJ,SHmII,uBAAA,CAAA,WAAA,CAAA,CAAA,IAAA,CAAA;AACF,MAAA,CAAA,IAAA,EAAA,CAAA,WAAA,KAAA,CAAA,MAAA,CAAA,CAAA;AAEA,WAAA,QACM,EAAA,KAAA,EAAA,UACA,EAAA,KAAA,EAAA,QGlIR,EAAC;EHsIC;AAAA,AAIM,SAAA,8BAAgB,CAAA,UAAwB,CAAE,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA;AAC1C,WAAA,aAAY,EAAA,MAAA,EAAA,KAAA,EAAA,cAA6B,EAAC,cAAU,EAAI,UACxD,EAAA,KAAA,EAAA,uBAAwB,EAAC,gBAAC,EAAA,IAAA,EAAA,WAAA,EAAA,qBAAA,EAAA,SAAA,EAAA,KAAA,EAAA,SAAA,EAAA,MAAA,EAAA;EAE9B;AI9TJ,AJ8TI,OI9TG;AACD,UAAM,GCDZ,SAAS,IAAG;ACAZ,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,cAAoB,KAAG,QAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;AAA1C,WAAoB,KAAG,KAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;AAA1C,iBAAoB,KAAG,WAAkB,CAAC;AAA1C,uBAAoB,KAAG,iBAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,kCAAoB,KAAG,4BAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,6BAAoB,KAAG,uBAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,0BAAoB,KAAG,oBAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,kBAAoB,KAAG,YAAkB,CAAC;AAA1C,uBAAoB,KAAG,iBAAkB,CAAC;AAA1C,2BAAoB,KAAG,qBAAkB,CAAC;AAA1C,gCAAoB,KAAG,0BAAkB,CAAC;AAA1C,wBAAoB,KAAG,kBAAkB,CAAC;AAA1C,iCAAoB,KAAG,2BAAkB,CAAC;AAA1C,+BAAoB,KAAG,yBAAkB,CAAC;AAA1C,+BAAoB,KAAG,yBAAkB,CAAC;AAA1C,mCAAoB,KAAG,6BAAkB,CAAC;AAA1C,mCAAoB,KAAG,6BAAkB,CAAC;AAA1C,8BAAoB,KAAG,wBAAkB,CAAC;AAA1C,0BAAoB,KAAG,oBAAkB,CAAC;IDElC,CDDuB;AACzB,UAAM;+BJuFmB,yBAAuB;WAC3C,sBAAoB;0BACL,kBAAgB;0BAChB,kBAAgB;sBACpB,cAAY;mBACf,SAAO;oBACN,UAAQ;iBACX,OAAK;AGtDtB,WFzCqD,eAAA,CAAA,YAAA,CAAA,aAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AD2HrD,eAAS,EAAA,CAAA,MAAA,KAAA,OAAmB,CAAU,CAAU,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,CAAA;QAC9C,CAAA,CAAA,CAAA;AC7HF,WAAK,eAAe,AAAC,CAAA,mBAAA,CAAA,aACP,CAAA,EAAA,GAAA,CAAA,UAAW,CAAA;AAAC,eAAA,ECD1B,CAAA,MAAK,KAAK,OAAA,CAAA,CAAV,EAAA,MAAK,KAAK,OAAA,CAAA,CAAA,CAAA;QDCwC,CAAC,CAAC,CAAC;ADqKnD,WAAA,eACA,CAAA,kBAAqB,CAAA,aAAA,CAAqB,EAAA,GAAI,CAAA,UAAM,AAAM,CAAA;AAQ5D,eAAA,EAAA,CAAA,MAAA,KAAA,OAAA,CAAA,CAAA,CAAA;QAAA,CAAA,CAAA,CC/KK;AD+LL,WAAA,eAAA,CAAA,qBAAA,CAAA,aAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AAAA,eC/LK,EAAA,CAAA,MAAA,KAAgB,OAAA,CAAA,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CACb,CAAA;QAAkB,CAAA,CAAA,CAAA;AE4F1B,WF5FqD,eAAA,CAAA,YAAA,CAAA,aAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AD+MrD,eAAS,EAAA,CAAA,MAAA,KAAA,OAAA,CAAA,CAA0B,EAAA,MAAmB,KAAA,OAAA,CAAA,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,CAAA;QACpD,CAAA,CAAA,CAAA;AGxGF,WFxGqD,eAAA,CAAA,cAAA,CAAA,aAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;ADuNrD,eAAS,EAAA,CAAA,MAAA,KAAA,OAAqB,CAAE,CAAA,CAAA;QAC1B,CAAA,CAAA,CAAA;AAcN,WAAO,eAAM,CAAA,uBAAyB,CAAA,aAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AAOpC,eAAA,EAAU,CAAE,MAAA,KAAiB,OAAwB,CAAG,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,CAAA;QACtD,CAAA,CAAA,CAAA;AAkBA,WAAA,eAAgB,CAAA,kBAAa,CAAU,aAAI,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AAC7C,eAAA,EAAA,CAAA,MAAA,KAAA,OAAA,CAAA,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,CAAA;QAEA,CAAA,CAAA,CAAA;AAeE,WAAA,eAAO,CAAA,oBAAsB,CAAW,aAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AAC1C,eAAA,EAAA,CAAA,MAAA,KAAA,OAAA,CAAA,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,CAAA;QAEA,CAAA,CAAA,CAAA;AAGA,WAEA,eAAiB,CAAA,wBAAA,CAAA,aAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AACX,eAAE,EAAI,CAAA,IAAA,CAAG,CAAA,CAAA;QACb,CAAA,CAAA,CAAA;AG5HJ,WHiIE,eAAA,CAAA,yBAAA,CAAA,aAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AAEA,eAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA;QACE,CAAA,CAAA,CAAA;AAKE,WAAA,eAAU,CAAA,wBAAuB,CAAA,aAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AACnC,eAAO,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA;QACL,CAAA,CAAA,CAAA;AAWE,WAAA,eAAW,CAAG,sBAAa,CAAW,aAAC,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AACvC,eAAA,EAAA,CAAA,IAAO,CAAI,CAAA,EAAA,MAAG,KAAA,OAAa,CAAA,CAAA,CAAA;QAC3B,CAAA,CAAA,CAAA;AAKiH,WAAA,eAAA,CAAA,6BAAA,CAAA,aAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AACrH,eAAI,EAAA,CAAA,MAAA,KAAgB,OAAI,CAAA,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,EAAA,MAAA,KAAA,OAAA,CAAA,CAAA,CAAA;QACtB,CAAA,CAAA,CAAA;iCOhUkB,CAAA,SAAQ,AAAC,gCCAjC,SAAQ,AAAC;AACC,AAAI,UAAA,6BRgUV,SAAO,2BAAA,CACE,QAAK,CAAA,CAAA,OAAA,CAAA;AACd,aAAA,SAAA,EAAA,SAAA,CAAA;AACF,aAAA,QAAA,EAAA,QAAA,CAAA;AAEA,aAAA,WAAA,EAAoB,CAAA,IAAwB,cAAA,CAAA,OAAA,CAAA,CAAA;AACtC,aAAA,YAAU,EAAG,CAAA,IAAA,eAAa,CAAA,IAAA,WAAe,CAAA,CAAA;AACzC,aAAA,WAAW,EAAG,CAAA,IAAA,cAAa,CAAA,IAAA,WAAY,CAAA,CAAA;QQvUG,ARwU1C,CQxU2C;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;ARyU1C,sBAAQ,CAAR,UAAQ,OAAK;AACX,cAAA,CAAA,KAAK,EAAA,EAAA,CAAA;AACH,cAAA,CAAA,KAAA,EAAO,CAAA,OAAA,IAAA,EAAA,SAAA,CAAA,CAAmB;AAE5B,AAAK,gBAAA,CAAA,aAAA,EAAA,CAAA,CAAA,KAAgB,QAAA,CAAA,GAAA,OAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACnB,qBAAO,EAAA,EAAA,cAAU,EAAO,CAAA,KAAG,EAAA,EAAA;YAE7B,EAAA,CAAA;AACE,iBAAI,CAAA,CAAA,SAAA,CAAA,OAAkB,CAAA,KAAG,CAAA,CAAA;UACvB;AGxIR,uBHyIa,CGzIb,UHyIa,UAAA;AACL,iBAAA,CAAA,UAAO,IAAA,EAAA,SAAA,CAAA;qBAAA,SAAmB,EAAO,EAAA;YAAG,EAAA,CAAA;UGxI5C;AH2II,sBAAK,CAAL,UAAK,UAAA;AACH,iBAAA,CAAA,UAAO,IAAA,EAAA,SAAA,CAAA;qBAAmB,OAAA,EAAO,EAAA;YAAG,EAAA,CAAA;UAEtC;AACE,iBAAA,CAAA,UAAA,CAAO;AAET,cAAA,CAAA,IAAK,EAAA,CAAA,YAAA,CAAA,IAAA,SAAuB,CAAA,CAAA,IAAA,eAAA,EAAA,CAAA,CAAA,IAAA,iBAAA,EAAA,CAAA,CAAA,IAAA,cAAA,EAAA,CAAA,CAAA;AAC1B,iBAAA,CAAA,GAAO,SAAA,CAAA,wBAAgC,CAAG,sBAAkB,CAAK,8BAAA,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA,sBAAA,CAAA,oBAAA,CAAA,4BAAA,CAAA,CAAA,IAAA,QAAA,CAAA,CAAA;UAEnE;AACE,uBAAO,CAAP,UAAO,CAAA;AAET,iBAAK,CAAA,mBAAA,CAAA,IAAA,SAA2B,CAAA,CAAA,wBAAA,CAAA,IAAA,WAAA,CAAA,CAAA,CAAA;UAC9B;AAEF,sBAAK,CAAL,UAAK,CAAA;AACC,iBAAA,CAAA,kBAAS,CAAA,IAAa,SAAQ,CAAC,CAAC;UACpC;AAEF,yBAAA,CAAA,UAAA,CAAA;AACE,cAAA,CAAA,IAAA,EAAM,CAAA,IAAI,QAAA,EAAA,CAAA;AACd,iBAAA,CAAA,qBAAA,CAAA,IAAA,SAAA,CAAA,KAAA,CAAA,CAAA;UACF;AAEA,gBAAA,CAAA,UAAA;;AACE,cAAA,CAAA,GAAO,EAAA,CAAA,IAAA,QAAA,IAAA,EAAA,SAAqB,CAAA;mBAAE,CAAA,cAAkB,CAAA,CAAA,CAAA;YAAA,EAAG,KAAA,CAAA,IAAA,CAAA,CAAY;AACjE,iBAAA,CAAA,YAAA,CAAA,IAAA,oBAAA,EAAA,CAAA,CAAA,IAAA,qBAAA,EAAA,CAAA,IAAA,CAAA,CAAA;UAEA;AACM,4BAAQ,CAAR,UAAQ,CAAA;AACZ,iBAAS,CAAA,wBAAgB,CAAO,IAAG,WAAK,CAAA,CAAA;UACtC;AACA,6BAAY,CAAZ,UAAY,CAAA;AACZ,iBAAO,CAAA,yBAAuB,CAAC,IAAE,YAAA,CAAA,CAAA;UACjC;AGjJJ,kBHkJE,CGlJF,UHkJE,CAAA,CAAA;AACA,eAAE,CAAA,KAAK,GAAG,6BAA8B,CAAA;AACxC,mBAAS,CAAA,IAAC,mBAAA,CAAA,CAAA,CAAA,CAAA;YACZ,KAAA;AAEA,mBAAW,CAAA,IAAA,kBAAc,CAAA,CAAA,CAAA,CAAA;YACvB;AAAA,UACF;AAEA,2BAAmB,CAAnB,UAAmB,CAAA,CAAA;AACjB,cAAA,CAAA,KAAO,EAAA,CAAA,IAAA,WAAoB,CAAA,CAAA,UAAA,CAAA,CAAa;AAC1C,cAAA,CAAA,OAAA,EAAA,CAAA,IAAA,WAAA,CAAA,CAAA,aAAA,CAAA,CAAA;AAEA,iBAA8B,CAAA,uBAAA,CAAA,CAAA,UAAA,EAAA,EAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA,IAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA;UAC5B;AACF,0BAAA,CAAA,UAAA,CAAA,CAAA;AACF,cAAA,CAAA,QAAA,EAAA,CAAA,IAAA,WAAA,CAAA,CAAA,UAAA,CAAA,CAAA;AAAA,AC5YK,cAAA,CAAA,QAAA,EAAA,CAAA,IAAgB,WAAA,CAAA,CAAA,UAAA,CAAA,CAAA;AACK,cAAA,CAAA,MCD1B,EAAA,CAAA,IAAK,YAAK,COAV,CAAA,UAAK,CAAA,CAAA;ARC+C,AAAC,cAAA,CAAA,UAAA,EAAA,CAAA,IAAA,sBAAA,CAAA,CAAA,CAAA,CAAA;AADrD,AAAK,cAAA,CAAA,SAAA,EAAe,CAAA,6BAAC,CAAA,CAAA,UAAA,EAAA,EAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CACb;AAAkB,cAAA,CAAA,MQD1B,EAAA,CAAA,IAAK,UTuPmB,CAAA,CAAA,CAAA,CAAA;ACtP4B,AAAC,cAAA,CAAA,KAAA,EAAA,CAAA,sBAAA,CAAA,UAAA,CAAA,SAAA,CAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,cAAA,EAAA,UAAA,EAAA,GAAA,CAAA,OAAA,CAAA,CAAA;AADrD,YAAA;AAC0B,eAAA,CAAA,eQDrB,EAAA,CAAA;ARCgD,mBAAA,CAAA,IAAA,eAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA;YADrD,KAAK;AACqB,mBQD1B,MAAA,CAAK;YRC+C;AAAA,UADpD;AAC0B,8BDuSZ,CCvSY,UDuSF,CAAA,CCvSyB;AAAG,AAAC,cAAA,CAAA,OAAA,EAAA,CAAA,IAAA,WAAA,CAAA,CAAA,aAAA,CAAA,CAAA;AADrD,AAAK,cAAA,CAAA,QAAA,EAAA,CAAA,IAAgB,WAAA,CAAA,CAAA,UAAA,CAAA,CAAA;AACK,cAAA,CAAA,IAAA,ED+SH,CAAA,IAAA,QC/S0B,CAAA,CAAA,CAAA,CAAA;AAAG,mBAAC,CAAA,KAAA;AADhD,iBAAA,iBAAgB;AACK,qBDqTJ,CAAA,kBCrT2B,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA;AAAA,AAAI,iBAAA,kBAAA;AADhD,uBAAA,QAAgB,EAAA,MAAA,EAAA,CAAA,IAAA,WAAA,CAAA,CAAA,YAAA,CAAA,EAAA;AAAA,AACK,iBAAA,qBAAuB;AAAI,mBAAA,CAAA,aAAA,GAAA,EAAA,CAAA;AADhD,uBAAA,CAAA,oBAAgB,CAAA,CAAA,KAAA,CAAA,QAAA,CAAA,SAAA,CAAA,CAAA;gBACK,KDgXP;AChXkC,uBAAA,CAAA,kBAAA,CAAA,QAAA,GAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,KAAA,EAAA,CAAA;gBADhD;AAAA,AACqB,iBAAA,0BAAuB;AAAI,qBAAA,CAAA,kBAAA,CAAA,QAAA,GAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA;AAAA,AADhD,iBAAA,2BAAgB;AACK,qBDwYd,CAAA,kBCxYqC,CAAA,QAAA,GAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA;AAAA,AAAI,iBAAA,yBAAA;ADgZrD,qBAAA,CAAA,kBAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA;AAAA,AGvHM,iBAAK,wBAAsB;AACzB,qBAAO,CAAA,kBAAiB,AAAC,CAAC,QAAO,CAAG,CAAA,IAAG,iBAAiB,AAAC,CAAC,CAAA,CAAC,CAAC,CAAC;AAAA,AAC/D,iBAAK,6BAA2B;AAC9B,qBAAO,CAAA,kBAAiB,AAAC,CAAC,QAAO,GAAM,mBAAkB,EAAC,UAAQ,EAAC,CAAA,CAAA,KAAK,EAAC,OAAK,EAAC,KAAG,EAAC,IAAE,EAAC,CAAC;AAAA,AACzF,iBAAK,yBAAuB;AAC1B,AAAI,kBAAA,CAAA,GAAE,EAAI,CAAA,IAAG,WAAW,CAAE,CAAA,KAAK,CAAE,CAAA,CAAC,CAAC,CAAC;AACpC,qBAAO,CAAA,kBAAiB,AAAC,CAAC,QAAO,GAAM,OAAM,EAAC,IAAG,EAAC,IAAE,EAAC,IAAE,EAAC,CAAC;AAAA,AAC3D;AACE,oBAAM,IAAI,cAAY,AAAC,EAAC,oBAAoB,EAAC,CAAA,CAAA,KAAK,EAAG,CAAC;AADjD,YAET;UACF;AACA,uBAAa,CAAb,UAAe,CAAA,CAAG,CAAA,IAAG;;AACnB,iBAAO,CAAA,sBAAqB,AAAC,CAAC,CAAA,KAAK,IAAI,AAAC,EAAC,SAAC,CAAA;mBAAM,CAAA,gBAAe,CAAE,CAAA,CAAC;YAAA,EAAC,CAAG,KAAG,CAAC,CAAC;UAC7E;AACA,yBAAe,CAAf,UAAiB,CAAA,CAAG;AAClB,AAAI,cAAA,CAAA,GAAE,EAAI,GAAC,CAAC;AACZ,gBAAS,GAAA,CAAA,CAAA,EAAI,EAAA,CAAG,CAAA,CAAA,EAAI,CAAA,CAAA,KAAK,OAAO,CAAG,GAAE,CAAA,CAAG;AACtC,gBAAE,GAAK,CAAA,IAAG,WAAW,AAAC,CAAC,CAAA,UAAU,CAAE,CAAA,CAAC,CAAC,CAAC;AACtC,gBAAE,GAAK,MAAI,CAAC;AACZ,gBAAE,GAAK,CAAA,IAAG,WAAW,CAAE,CAAA,KAAK,CAAE,CAAA,CAAC,CAAC,CAAC;AACjC,gBAAE,GAAK,MAAI,CAAC;YACd;AAAA,AACA,cAAE,GAAK,CAAA,IAAG,WAAW,AAAC,CAAC,CAAA,UAAU,CAAE,CAAA,KAAK,OAAO,CAAC,CAAC,CAAC;AAClD,iBAAO,IAAE,CAAC;UACZ;AACA,mBAAS,CAAT,UAAW,KAAI,CAAG;AAChB,iBAAO,CAAA,IAAG,UAAU,AAAC,CAAC,KAAI,CAAC,CAAC;UAC9B;AACA,kBAAQ,CAAR,UAAU,CAAA,CAAG;AACX,iBAAO,CAAA,CAAA,gBAAgB,EAAI,CAAA,cAAa,AAAC,CAAC,CAAA,UAAU,EAAI,EAAA,CAAC,CAAA,CAAI,GAAC,CAAC;UACjE;AACA,gBAAM,CAAN,UAAQ,CAAA;;AACN,iBAAO,CAAA,CAAA,KAAK,IAAI,AAAC,EAAC,SAAC,GAAE;mBAAM,CAAA,eAAc,CAAE,GAAE,CAAC;YAAA,EAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;UAC7D;aKxT8D,CAAC;MACzD,AAAC,EAAC,EDJ4D;AJ6TtE,WAAK,eAAe,AAAC,CAAC,0BAAyB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC7E,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,YAAU,CAAC,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,0BAAyB,UAAU,cAAc,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACrG,eAAO,EAAC,CAAC,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,YAAU,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,0BAAyB,UAAU,eAAe,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACtG,eAAO,EAAC,CAAC,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,OAAK,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,0BAAyB,UAAU,cAAc,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACrG,eAAO,EAAC,CAAC,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,OAAK,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,0BAAyB,UAAU,UAAU,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACjG,eAAO,EAAC,CAAC,WAAU,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,0BAAyB,UAAU,mBAAmB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC1G,eAAO,EAAC,CAAC,WAAU,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,0BAAyB,UAAU,kBAAkB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACzG,eAAO,EAAC,CAAC,WAAU,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,0BAAyB,UAAU,sBAAsB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC7G,eAAO,EAAC,CAAC,WAAU,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,0BAAyB,UAAU,eAAe,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACtG,eAAO,EAAC,CAAC,WAAU,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,0BAAyB,UAAU,iBAAiB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACxG,eAAO,EAAC,CAAC,WAAU,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,0BAAyB,UAAU,QAAQ,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC/F,eAAO,EAAC,CAAC,WAAU,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IC3V0B;EAC3B,CAAA;ALDI,CAAC,CAAC;AI+V8C","file":"angular2/src/change_detection/change_detection_jit_generator.js","sourceRoot":"/Users/adam/Git/angular/dist/js/prod/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {isPresent, isBlank, BaseException, Type} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {ContextWithVariableBindings} from './parser/context_with_variable_bindings';\nimport {AbstractChangeDetector} from './abstract_change_detector';\nimport {ChangeDetectionUtil} from './change_detection_util';\n\nimport {\n  ProtoRecord,\n  RECORD_TYPE_SELF,\n  RECORD_TYPE_PROPERTY,\n  RECORD_TYPE_INVOKE_METHOD,\n  RECORD_TYPE_CONST,\n  RECORD_TYPE_INVOKE_CLOSURE,\n  RECORD_TYPE_PRIMITIVE_OP,\n  RECORD_TYPE_KEYED_ACCESS,\n  RECORD_TYPE_INVOKE_FORMATTER,\n  RECORD_TYPE_STRUCTURAL_CHECK,\n  RECORD_TYPE_INTERPOLATE,\n  ProtoChangeDetector\n  } from './proto_change_detector';\n\n/**\n * The code generator takes a list of proto records and creates a function/class\n * that \"emulates\" what the developer would write by hand to implement the same\n * kind of behaviour.\n *\n * For example: An expression `address.city` will result in the following class:\n *\n * var ChangeDetector0 = function ChangeDetector0(dispatcher, formatters, protos) {\n *   AbstractChangeDetector.call(this);\n *   this.dispatcher = dispatcher;\n *   this.formatters = formatters;\n *   this.protos = protos;\n *\n *   this.context = null;\n *   this.address0 = null;\n *   this.city1 = null;\n * }\n * ChangeDetector0.prototype = Object.create(AbstractChangeDetector.prototype);\n *\n * ChangeDetector0.prototype.detectChangesInRecords = function(throwOnChange) {\n *   var address0;\n *   var city1;\n *   var change;\n *   var changes = null;\n *   var temp;\n *   var context = this.context;\n *\n *   temp = ChangeDetectionUtil.findContext(\"address\", context);\n *   if (temp instanceof ContextWithVariableBindings) {\n *     address0 = temp.get('address');\n *   } else {\n *     address0 = temp.address;\n *   }\n *\n *   if (address0 !== this.address0) {\n *     this.address0 = address0;\n *   }\n *\n *   city1 = address0.city;\n *   if (city1 !== this.city1) {\n *     changes = ChangeDetectionUtil.addRecord(changes,\n *       ChangeDetectionUtil.simpleChangeRecord(this.protos[1].bindingMemento, this.city1, city1));\n *     this.city1 = city1;\n *   }\n *\n *   if (changes.length > 0) {\n *     if(throwOnChange) ChangeDetectionUtil.throwOnChange(this.protos[1], changes[0]);\n *     this.dispatcher.onRecordChange('address.city', changes);\n *     changes = null;\n *   }\n * }\n *\n *\n * ChangeDetector0.prototype.setContext = function(context) {\n *   this.context = context;\n * }\n *\n * return ChangeDetector0;\n *\n *\n * The only thing the generated class depends on is the super class AbstractChangeDetector.\n *\n * The implementation comprises two parts:\n * * ChangeDetectorJITGenerator has the logic of how everything fits together.\n * * template functions (e.g., constructorTemplate) define what code is generated.\n*/\n\nvar ABSTRACT_CHANGE_DETECTOR = \"AbstractChangeDetector\";\nvar UTIL = \"ChangeDetectionUtil\";\nvar DISPATCHER_ACCESSOR = \"this.dispatcher\";\nvar FORMATTERS_ACCESSOR = \"this.formatters\";\nvar PROTOS_ACCESSOR = \"this.protos\";\nvar CHANGE_LOCAL = \"change\";\nvar CHANGES_LOCAL = \"changes\";\nvar TEMP_LOCAL = \"temp\";\n\nfunction typeTemplate(type:string, cons:string, detectChanges:string, setContext:string):string {\n  return `\n${cons}\n${detectChanges}\n${setContext};\n\nreturn function(dispatcher, formatters) {\n  return new ${type}(dispatcher, formatters, protos);\n}\n`;\n}\n\nfunction constructorTemplate(type:string, fieldsDefinitions:string):string {\n  return `\nvar ${type} = function ${type}(dispatcher, formatters, protos) {\n${ABSTRACT_CHANGE_DETECTOR}.call(this);\n${DISPATCHER_ACCESSOR} = dispatcher;\n${FORMATTERS_ACCESSOR} = formatters;\n${PROTOS_ACCESSOR} = protos;\n${fieldsDefinitions}\n}\n\n${type}.prototype = Object.create(${ABSTRACT_CHANGE_DETECTOR}.prototype);\n`;\n}\n\nfunction setContextTemplate(type:string):string {\n  return `\n${type}.prototype.setContext = function(context) {\n  this.context = context;\n}\n`;\n}\n\nfunction detectChangesTemplate(type:string, body:string):string {\n  return `\n${type}.prototype.detectChangesInRecords = function(throwOnChange) {\n  ${body}\n}\n`;\n}\n\n\nfunction bodyTemplate(localDefinitions:string, changeDefinitions:string, records:string):string {\n  return `\n${localDefinitions}\n${changeDefinitions}\nvar ${TEMP_LOCAL};\nvar ${CHANGE_LOCAL};\nvar ${CHANGES_LOCAL} = null;\n\ncontext = this.context;\n${records}\n`;\n}\n\nfunction notifyTemplate(index:number):string{\n  return  `\nif (${CHANGES_LOCAL} && ${CHANGES_LOCAL}.length > 0) {\n  if(throwOnChange) ${UTIL}.throwOnChange(${PROTOS_ACCESSOR}[${index}], ${CHANGES_LOCAL}[0]);\n  ${DISPATCHER_ACCESSOR}.onRecordChange(${PROTOS_ACCESSOR}[${index}].directiveMemento, ${CHANGES_LOCAL});\n  ${CHANGES_LOCAL} = null;\n}\n`;\n}\n\n\nfunction structuralCheckTemplate(selfIndex:number, field:string, context:string, notify:string):string{\n  return `\n${CHANGE_LOCAL} = ${UTIL}.structuralCheck(${field}, ${context});\nif (${CHANGE_LOCAL}) {\n  ${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.changeRecord(${PROTOS_ACCESSOR}[${selfIndex}].bindingMemento, ${CHANGE_LOCAL}));\n  ${field} = ${CHANGE_LOCAL}.currentValue;\n}\n${notify}\n`;\n}\n\nfunction referenceCheckTemplate(assignment, newValue, oldValue, change, addRecord, notify) {\n  return `\n${assignment}\nif (${newValue} !== ${oldValue} || (${newValue} !== ${newValue}) && (${oldValue} !== ${oldValue})) {\n  ${change} = true;\n  ${addRecord}\n  ${oldValue} = ${newValue};\n}\n${notify}\n`;\n}\n\nfunction assignmentTemplate(field:string, value:string) {\n  return `${field} = ${value};`;\n}\n\nfunction propertyReadTemplate(name:string, context:string, newValue:string) {\n  return `\n${TEMP_LOCAL} = ${UTIL}.findContext(\"${name}\", ${context});\nif (${TEMP_LOCAL} instanceof ContextWithVariableBindings) {\n  ${newValue} = ${TEMP_LOCAL}.get('${name}');\n} else {\n  ${newValue} = ${TEMP_LOCAL}.${name};\n}\n`;\n}\n\nfunction localDefinitionsTemplate(names:List):string {\n  return names.map((n) => `var ${n};`).join(\"\\n\");\n}\n\nfunction changeDefinitionsTemplate(names:List):string {\n  return names.map((n) => `var ${n} = false;`).join(\"\\n\");\n}\n\nfunction fieldDefinitionsTemplate(names:List):string {\n  return names.map((n) => `${n} = ${UTIL}.unitialized();`).join(\"\\n\");\n}\n\nfunction ifChangedGuardTemplate(changeNames:List, body:string):string {\n  var cond = changeNames.join(\" || \");\n  return `\nif (${cond}) {\n  ${body}\n}\n`;\n}\n\nfunction addSimpleChangeRecordTemplate(protoIndex:number, oldValue:string, newValue:string) {\n  return `${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.simpleChangeRecord(${PROTOS_ACCESSOR}[${protoIndex}].bindingMemento, ${oldValue}, ${newValue}));`;\n}\n\n\nexport class ChangeDetectorJITGenerator {\n  typeName:string;\n  records:List<ProtoRecord>;\n  localNames:List<String>;\n  changeNames:List<String>;\n  fieldNames:List<String>;\n\n  constructor(typeName:string, records:List<ProtoRecord>) {\n    this.typeName = typeName;\n    this.records = records;\n\n    this.localNames = this.getLocalNames(records);\n    this.changeNames = this.getChangeNames(this.localNames);\n    this.fieldNames = this.getFieldNames(this.localNames);\n  }\n\n  getLocalNames(records:List<ProtoRecord>):List<String> {\n    var index = 0;\n    var names = records.map((r) => {\n      var sanitizedName = r.name.replace(new RegExp(\"\\\\W\", \"g\"), '');\n      return `${sanitizedName}${index++}`\n    });\n    return [\"context\"].concat(names);\n  }\n\n  getChangeNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `change_${n}`);\n  }\n\n  getFieldNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `this.${n}`);\n  }\n\n\n  generate():Function {\n    var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genSetContext());\n    return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'ContextWithVariableBindings', 'protos', text)(AbstractChangeDetector, ChangeDetectionUtil, ContextWithVariableBindings, this.records);\n  }\n\n  genConstructor():string {\n    return constructorTemplate(this.typeName, fieldDefinitionsTemplate(this.fieldNames));\n  }\n\n  genSetContext():string {\n    return setContextTemplate(this.typeName);\n  }\n\n  genDetectChanges():string {\n    var body = this.genBody();\n    return detectChangesTemplate(this.typeName, body);\n  }\n\n  genBody():string {\n    var rec = this.records.map((r) => this.genRecord(r)).join(\"\\n\");\n    return bodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec);\n  }\n\n  genLocalDefinitions():string {\n    return localDefinitionsTemplate(this.localNames);\n  }\n\n  genChangeDefinitions():string {\n    return changeDefinitionsTemplate(this.changeNames);\n  }\n\n  genRecord(r:ProtoRecord):string {\n    if (r.mode == RECORD_TYPE_STRUCTURAL_CHECK) {\n      return this.getStructuralCheck(r);\n    } else {\n      return this.genReferenceCheck(r);\n    }\n  }\n\n  getStructuralCheck(r:ProtoRecord):string {\n    var field = this.fieldNames[r.selfIndex];\n    var context = this.localNames[r.contextIndex];\n    return structuralCheckTemplate(r.selfIndex - 1, field, context, this.genNotify(r));\n  }\n\n  genReferenceCheck(r:ProtoRecord):string {\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var assignment = this.genUpdateCurrentValue(r);\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n\n    var check = referenceCheckTemplate(assignment, newValue, oldValue, change, r.lastInBinding ? addRecord : '', notify);;\n    if (r.isPureFunction()) {\n      return this.ifChangedGuard(r, check);\n    } else {\n      return check;\n    }\n  }\n\n  genUpdateCurrentValue(r:ProtoRecord):string {\n    var context = this.localNames[r.contextIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var args = this.genArgs(r);\n\n    switch (r.mode) {\n      case RECORD_TYPE_SELF:\n        return assignmentTemplate(newValue, context);\n\n      case RECORD_TYPE_CONST:\n        return `${newValue} = ${this.genLiteral(r.funcOrValue)}`;\n\n      case RECORD_TYPE_PROPERTY:\n        if (r.contextIndex == 0) { // only the first property read can be a local\n          return propertyReadTemplate(r.name, context, newValue);\n        } else {\n          return assignmentTemplate(newValue, `${context}.${r.name}`);\n        }\n\n      case RECORD_TYPE_INVOKE_METHOD:\n        return assignmentTemplate(newValue, `${context}.${r.name}(${args})`);\n\n      case RECORD_TYPE_INVOKE_CLOSURE:\n        return assignmentTemplate(newValue, `${context}(${args})`);\n\n      case RECORD_TYPE_PRIMITIVE_OP:\n        return assignmentTemplate(newValue, `${UTIL}.${r.name}(${args})`);\n\n      case RECORD_TYPE_INTERPOLATE:\n        return assignmentTemplate(newValue, this.genInterpolation(r));\n\n      case RECORD_TYPE_INVOKE_FORMATTER:\n        return assignmentTemplate(newValue, `${FORMATTERS_ACCESSOR}.get(\"${r.name}\")(${args})`);\n\n      case RECORD_TYPE_KEYED_ACCESS:\n        var key = this.localNames[r.args[0]];\n        return assignmentTemplate(newValue, `${context}[${key}]`);\n\n      default:\n        throw new BaseException(`Unknown operation ${r.mode}`);\n    }\n  }\n\n  ifChangedGuard(r:ProtoRecord, body:string):string {\n    return ifChangedGuardTemplate(r.args.map((a) => this.changeNames[a]), body);\n  }\n\n  genInterpolation(r:ProtoRecord):string{\n    var res = \"\";\n    for (var i = 0; i < r.args.length; ++i) {\n      res += this.genLiteral(r.fixedArgs[i]);\n      res += \" + \";\n      res += this.localNames[r.args[i]];\n      res += \" + \";\n    }\n    res += this.genLiteral(r.fixedArgs[r.args.length]);\n    return res;\n  }\n\n  genLiteral(value):string {\n    return JSON.stringify(value);\n  }\n\n  genNotify(r):string{\n    return r.lastInDirective ? notifyTemplate(r.selfIndex - 1) : '';\n  }\n\n  genArgs(r:ProtoRecord):string {\n    return r.args.map((arg) => this.localNames[arg]).join(\", \");\n  }\n}\n\n\n\n\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)","import {isPresent,\n  isBlank,\n  BaseException,\n  Type} from 'angular2/src/facade/lang';\nimport {List,\n  ListWrapper,\n  MapWrapper,\n  StringMapWrapper} from 'angular2/src/facade/collection';\nimport {ContextWithVariableBindings} from './parser/context_with_variable_bindings';\nimport {AbstractChangeDetector} from './abstract_change_detector';\nimport {ChangeDetectionUtil} from './change_detection_util';\nimport {ProtoRecord,\n  RECORD_TYPE_SELF,\n  RECORD_TYPE_PROPERTY,\n  RECORD_TYPE_INVOKE_METHOD,\n  RECORD_TYPE_CONST,\n  RECORD_TYPE_INVOKE_CLOSURE,\n  RECORD_TYPE_PRIMITIVE_OP,\n  RECORD_TYPE_KEYED_ACCESS,\n  RECORD_TYPE_INVOKE_FORMATTER,\n  RECORD_TYPE_STRUCTURAL_CHECK,\n  RECORD_TYPE_INTERPOLATE,\n  ProtoChangeDetector} from './proto_change_detector';\nvar ABSTRACT_CHANGE_DETECTOR = \"AbstractChangeDetector\";\nvar UTIL = \"ChangeDetectionUtil\";\nvar DISPATCHER_ACCESSOR = \"this.dispatcher\";\nvar FORMATTERS_ACCESSOR = \"this.formatters\";\nvar PROTOS_ACCESSOR = \"this.protos\";\nvar CHANGE_LOCAL = \"change\";\nvar CHANGES_LOCAL = \"changes\";\nvar TEMP_LOCAL = \"temp\";\nfunction typeTemplate(type, cons, detectChanges, setContext) {\n  return `\n${cons}\n${detectChanges}\n${setContext};\n\nreturn function(dispatcher, formatters) {\n  return new ${type}(dispatcher, formatters, protos);\n}\n`;\n}\nObject.defineProperty(typeTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction constructorTemplate(type, fieldsDefinitions) {\n  return `\nvar ${type} = function ${type}(dispatcher, formatters, protos) {\n${ABSTRACT_CHANGE_DETECTOR}.call(this);\n${DISPATCHER_ACCESSOR} = dispatcher;\n${FORMATTERS_ACCESSOR} = formatters;\n${PROTOS_ACCESSOR} = protos;\n${fieldsDefinitions}\n}\n\n${type}.prototype = Object.create(${ABSTRACT_CHANGE_DETECTOR}.prototype);\n`;\n}\nObject.defineProperty(constructorTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction setContextTemplate(type) {\n  return `\n${type}.prototype.setContext = function(context) {\n  this.context = context;\n}\n`;\n}\nObject.defineProperty(setContextTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nfunction detectChangesTemplate(type, body) {\n  return `\n${type}.prototype.detectChangesInRecords = function(throwOnChange) {\n  ${body}\n}\n`;\n}\nObject.defineProperty(detectChangesTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction bodyTemplate(localDefinitions, changeDefinitions, records) {\n  return `\n${localDefinitions}\n${changeDefinitions}\nvar ${TEMP_LOCAL};\nvar ${CHANGE_LOCAL};\nvar ${CHANGES_LOCAL} = null;\n\ncontext = this.context;\n${records}\n`;\n}\nObject.defineProperty(bodyTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction notifyTemplate(index) {\n  return `\nif (${CHANGES_LOCAL} && ${CHANGES_LOCAL}.length > 0) {\n  if(throwOnChange) ${UTIL}.throwOnChange(${PROTOS_ACCESSOR}[${index}], ${CHANGES_LOCAL}[0]);\n  ${DISPATCHER_ACCESSOR}.onRecordChange(${PROTOS_ACCESSOR}[${index}].directiveMemento, ${CHANGES_LOCAL});\n  ${CHANGES_LOCAL} = null;\n}\n`;\n}\nObject.defineProperty(notifyTemplate, \"parameters\", {get: function() {\n    return [[assert.type.number]];\n  }});\nfunction structuralCheckTemplate(selfIndex, field, context, notify) {\n  return `\n${CHANGE_LOCAL} = ${UTIL}.structuralCheck(${field}, ${context});\nif (${CHANGE_LOCAL}) {\n  ${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.changeRecord(${PROTOS_ACCESSOR}[${selfIndex}].bindingMemento, ${CHANGE_LOCAL}));\n  ${field} = ${CHANGE_LOCAL}.currentValue;\n}\n${notify}\n`;\n}\nObject.defineProperty(structuralCheckTemplate, \"parameters\", {get: function() {\n    return [[assert.type.number], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction referenceCheckTemplate(assignment, newValue, oldValue, change, addRecord, notify) {\n  return `\n${assignment}\nif (${newValue} !== ${oldValue} || (${newValue} !== ${newValue}) && (${oldValue} !== ${oldValue})) {\n  ${change} = true;\n  ${addRecord}\n  ${oldValue} = ${newValue};\n}\n${notify}\n`;\n}\nfunction assignmentTemplate(field, value) {\n  return `${field} = ${value};`;\n}\nObject.defineProperty(assignmentTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction propertyReadTemplate(name, context, newValue) {\n  return `\n${TEMP_LOCAL} = ${UTIL}.findContext(\"${name}\", ${context});\nif (${TEMP_LOCAL} instanceof ContextWithVariableBindings) {\n  ${newValue} = ${TEMP_LOCAL}.get('${name}');\n} else {\n  ${newValue} = ${TEMP_LOCAL}.${name};\n}\n`;\n}\nObject.defineProperty(propertyReadTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction localDefinitionsTemplate(names) {\n  return names.map((n) => `var ${n};`).join(\"\\n\");\n}\nObject.defineProperty(localDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction changeDefinitionsTemplate(names) {\n  return names.map((n) => `var ${n} = false;`).join(\"\\n\");\n}\nObject.defineProperty(changeDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction fieldDefinitionsTemplate(names) {\n  return names.map((n) => `${n} = ${UTIL}.unitialized();`).join(\"\\n\");\n}\nObject.defineProperty(fieldDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction ifChangedGuardTemplate(changeNames, body) {\n  var cond = changeNames.join(\" || \");\n  return `\nif (${cond}) {\n  ${body}\n}\n`;\n}\nObject.defineProperty(ifChangedGuardTemplate, \"parameters\", {get: function() {\n    return [[List], [assert.type.string]];\n  }});\nfunction addSimpleChangeRecordTemplate(protoIndex, oldValue, newValue) {\n  return `${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.simpleChangeRecord(${PROTOS_ACCESSOR}[${protoIndex}].bindingMemento, ${oldValue}, ${newValue}));`;\n}\nObject.defineProperty(addSimpleChangeRecordTemplate, \"parameters\", {get: function() {\n    return [[assert.type.number], [assert.type.string], [assert.type.string]];\n  }});\nexport class ChangeDetectorJITGenerator {\n  constructor(typeName, records) {\n    this.typeName = typeName;\n    this.records = records;\n    this.localNames = this.getLocalNames(records);\n    this.changeNames = this.getChangeNames(this.localNames);\n    this.fieldNames = this.getFieldNames(this.localNames);\n  }\n  getLocalNames(records) {\n    var index = 0;\n    var names = records.map((r) => {\n      var sanitizedName = r.name.replace(new RegExp(\"\\\\W\", \"g\"), '');\n      return `${sanitizedName}${index++}`;\n    });\n    return [\"context\"].concat(names);\n  }\n  getChangeNames(localNames) {\n    return localNames.map((n) => `change_${n}`);\n  }\n  getFieldNames(localNames) {\n    return localNames.map((n) => `this.${n}`);\n  }\n  generate() {\n    var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genSetContext());\n    return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'ContextWithVariableBindings', 'protos', text)(AbstractChangeDetector, ChangeDetectionUtil, ContextWithVariableBindings, this.records);\n  }\n  genConstructor() {\n    return constructorTemplate(this.typeName, fieldDefinitionsTemplate(this.fieldNames));\n  }\n  genSetContext() {\n    return setContextTemplate(this.typeName);\n  }\n  genDetectChanges() {\n    var body = this.genBody();\n    return detectChangesTemplate(this.typeName, body);\n  }\n  genBody() {\n    var rec = this.records.map((r) => this.genRecord(r)).join(\"\\n\");\n    return bodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec);\n  }\n  genLocalDefinitions() {\n    return localDefinitionsTemplate(this.localNames);\n  }\n  genChangeDefinitions() {\n    return changeDefinitionsTemplate(this.changeNames);\n  }\n  genRecord(r) {\n    if (r.mode == RECORD_TYPE_STRUCTURAL_CHECK) {\n      return this.getStructuralCheck(r);\n    } else {\n      return this.genReferenceCheck(r);\n    }\n  }\n  getStructuralCheck(r) {\n    var field = this.fieldNames[r.selfIndex];\n    var context = this.localNames[r.contextIndex];\n    return structuralCheckTemplate(r.selfIndex - 1, field, context, this.genNotify(r));\n  }\n  genReferenceCheck(r) {\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var assignment = this.genUpdateCurrentValue(r);\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n    var check = referenceCheckTemplate(assignment, newValue, oldValue, change, r.lastInBinding ? addRecord : '', notify);\n    ;\n    if (r.isPureFunction()) {\n      return this.ifChangedGuard(r, check);\n    } else {\n      return check;\n    }\n  }\n  genUpdateCurrentValue(r) {\n    var context = this.localNames[r.contextIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var args = this.genArgs(r);\n    switch (r.mode) {\n      case RECORD_TYPE_SELF:\n        return assignmentTemplate(newValue, context);\n      case RECORD_TYPE_CONST:\n        return `${newValue} = ${this.genLiteral(r.funcOrValue)}`;\n      case RECORD_TYPE_PROPERTY:\n        if (r.contextIndex == 0) {\n          return propertyReadTemplate(r.name, context, newValue);\n        } else {\n          return assignmentTemplate(newValue, `${context}.${r.name}`);\n        }\n      case RECORD_TYPE_INVOKE_METHOD:\n        return assignmentTemplate(newValue, `${context}.${r.name}(${args})`);\n      case RECORD_TYPE_INVOKE_CLOSURE:\n        return assignmentTemplate(newValue, `${context}(${args})`);\n      case RECORD_TYPE_PRIMITIVE_OP:\n        return assignmentTemplate(newValue, `${UTIL}.${r.name}(${args})`);\n      case RECORD_TYPE_INTERPOLATE:\n        return assignmentTemplate(newValue, this.genInterpolation(r));\n      case RECORD_TYPE_INVOKE_FORMATTER:\n        return assignmentTemplate(newValue, `${FORMATTERS_ACCESSOR}.get(\"${r.name}\")(${args})`);\n      case RECORD_TYPE_KEYED_ACCESS:\n        var key = this.localNames[r.args[0]];\n        return assignmentTemplate(newValue, `${context}[${key}]`);\n      default:\n        throw new BaseException(`Unknown operation ${r.mode}`);\n    }\n  }\n  ifChangedGuard(r, body) {\n    return ifChangedGuardTemplate(r.args.map((a) => this.changeNames[a]), body);\n  }\n  genInterpolation(r) {\n    var res = \"\";\n    for (var i = 0; i < r.args.length; ++i) {\n      res += this.genLiteral(r.fixedArgs[i]);\n      res += \" + \";\n      res += this.localNames[r.args[i]];\n      res += \" + \";\n    }\n    res += this.genLiteral(r.fixedArgs[r.args.length]);\n    return res;\n  }\n  genLiteral(value) {\n    return JSON.stringify(value);\n  }\n  genNotify(r) {\n    return r.lastInDirective ? notifyTemplate(r.selfIndex - 1) : '';\n  }\n  genArgs(r) {\n    return r.args.map((arg) => this.localNames[arg]).join(\", \");\n  }\n}\nObject.defineProperty(ChangeDetectorJITGenerator, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.genericType(List, ProtoRecord)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getLocalNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, ProtoRecord)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getChangeNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getFieldNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genRecord, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getStructuralCheck, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genReferenceCheck, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genUpdateCurrentValue, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.ifChangedGuard, \"parameters\", {get: function() {\n    return [[ProtoRecord], [assert.type.string]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genInterpolation, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genArgs, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\n\n//# sourceMappingURL=/Users/adam/Git/angular/modules/angular2/src/change_detection/change_detection_jit_generator.map\n\n//# sourceMappingURL=./change_detection_jit_generator.map","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","assert.genericType($__placeholder__0)"]}