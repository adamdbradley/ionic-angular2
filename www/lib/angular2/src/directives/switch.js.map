{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","angular2/src/directives/switch.js","angular2/src/directives/@traceur/generated/TemplateParser/10","angular2/src/directives/@traceur/generated/TemplateParser/311"],"names":[],"mappings":"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","file":"angular2/src/directives/switch.js","sourceRoot":"/Users/adam/Git/angular/dist/js/prod/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","import {Decorator, Viewport} from 'angular2/src/core/annotations/annotations';\nimport {ViewContainer} from 'angular2/src/core/compiler/view_container';\nimport {NgElement} from 'angular2/src/core/dom/element';\nimport {DOM} from 'angular2/src/facade/dom';\nimport {isPresent, isBlank, normalizeBlank} from 'angular2/src/facade/lang';\nimport {ListWrapper, List, MapWrapper, Map} from 'angular2/src/facade/collection';\nimport {Parent} from 'angular2/src/core/annotations/visibility';\n\n/**\n * The `Switch` directive is used to conditionally swap DOM structure on your template based on a\n * scope expression.\n * Elements within `Switch` but without `SwitchWhen` or `SwitchDefault` directives will be\n * preserved at the location as specified in the template.\n *\n * `Switch` simply chooses nested elements and makes them visible based on which element matches\n * the value obtained from the evaluated expression. In other words, you define a container element\n * (where you place the directive), place an expression on the **`[switch]=\"...\"` attribute**),\n * define any inner elements inside of the directive and place a `[switch-when]` attribute per\n * element.\n * The when attribute is used to inform Switch which element to display when the expression is\n * evaluated. If a matching expression is not found via a when attribute then an element with the\n * default attribute is displayed.\n *\n * Example:\n *\n * ```\n * <ANY [switch]=\"expression\">\n *   <template [switch-when]=\"whenExpression1\">...</template>\n *   <template [switch-when]=\"whenExpression1\">...</template>\n *   <template [switch-default]>...</template>\n * </ANY>\n * ```\n */\n@Decorator({\n  selector: '[switch]',\n  bind: {\n    'switch': 'value'\n  }\n})\nexport class Switch {\n  _switchValue: any;\n  _useDefault: boolean;\n  _valueViewContainers: Map;\n  _activeViewContainers: List<ViewContainer>;\n\n  constructor() {\n    this._valueViewContainers = MapWrapper.create();\n    this._activeViewContainers = ListWrapper.create();\n    this._useDefault = false;\n  }\n\n  set value(value) {\n    // Empty the currently active ViewContainers\n    this._emptyAllActiveViewContainers();\n\n    // Add the ViewContainers matching the value (with a fallback to default)\n    this._useDefault = false;\n    var containers = MapWrapper.get(this._valueViewContainers, value);\n    if (isBlank(containers)) {\n      this._useDefault = true;\n      containers = normalizeBlank(MapWrapper.get(this._valueViewContainers, _whenDefault));\n    }\n    this._activateViewContainers(containers);\n\n    this._switchValue = value;\n  }\n\n  _onWhenValueChanged(oldWhen, newWhen, viewContainer: ViewContainer) {\n    this._deregisterViewContainer(oldWhen, viewContainer);\n    this._registerViewContainer(newWhen, viewContainer);\n\n    if (oldWhen === this._switchValue) {\n      viewContainer.remove();\n      ListWrapper.remove(this._activeViewContainers, viewContainer);\n    } else if (newWhen === this._switchValue) {\n      if (this._useDefault) {\n        this._useDefault = false;\n        this._emptyAllActiveViewContainers();\n      }\n      viewContainer.create();\n      ListWrapper.push(this._activeViewContainers, viewContainer);\n    }\n\n    // Switch to default when there is no more active ViewContainers\n    if (this._activeViewContainers.length === 0 && !this._useDefault) {\n      this._useDefault = true;\n      this._activateViewContainers(MapWrapper.get(this._valueViewContainers, _whenDefault));\n    }\n  }\n\n  _emptyAllActiveViewContainers() {\n    var activeContainers = this._activeViewContainers;\n    for (var i = 0; i < activeContainers.length; i++) {\n      activeContainers[i].remove();\n    }\n    this._activeViewContainers = ListWrapper.create();\n  }\n\n  _activateViewContainers(containers: List<ViewContainer>) {\n    // TODO(vicb): assert(this._activeViewContainers.length === 0);\n    if (isPresent(containers)) {\n      for (var i = 0; i < containers.length; i++) {\n        containers[i].create();\n      }\n      this._activeViewContainers = containers;\n    }\n  }\n\n  _registerViewContainer(value, container: ViewContainer) {\n    var containers = MapWrapper.get(this._valueViewContainers, value);\n    if (isBlank(containers)) {\n      containers = ListWrapper.create();\n      MapWrapper.set(this._valueViewContainers, value, containers);\n    }\n    ListWrapper.push(containers, container);\n  }\n\n  _deregisterViewContainer(value, container: ViewContainer) {\n    // `_whenDefault` is used a marker for non-registered whens\n    if (value == _whenDefault) return;\n    var containers = MapWrapper.get(this._valueViewContainers, value);\n    if (containers.length == 1) {\n      MapWrapper.delete(this._valueViewContainers, value);\n    } else {\n      ListWrapper.remove(containers, container);\n    }\n  }\n}\n\n/**\n * Defines a case statement as an expression.\n *\n * If multiple `SwitchWhen` match the `Switch` value, all of them are displayed.\n *\n * Example:\n *\n * ```\n * // match against a context variable\n * <template [switch-when]=\"contextVariable\">...</template>\n *\n * // match against a constant string\n * <template [switch-when]=\"'stringValue'\">...</template>\n * ```\n */\n@Viewport({\n  selector: '[switch-when]',\n  bind: {\n    'switch-when' : 'when'\n  }\n})\nexport class SwitchWhen {\n  _value: any;\n  _switch: Switch;\n  _viewContainer: ViewContainer;\n\n  constructor(el: NgElement, viewContainer: ViewContainer, @Parent() sswitch: Switch) {\n    // `_whenDefault` is used as a marker for a not yet initialized value\n    this._value = _whenDefault;\n    this._switch = sswitch;\n    this._viewContainer = viewContainer;\n  }\n\n  set when(value) {\n    this._switch._onWhenValueChanged(this._value, value, this._viewContainer);\n    this._value = value;\n  }\n}\n\n\n/**\n * Defines a default case statement.\n *\n * Default case statements are displayed when no `SwitchWhen` match the `switch` value.\n *\n * Example:\n *\n * ```\n * <template [switch-default]>...</template>\n * ```\n */\n@Viewport({\n  selector: '[switch-default]'\n})\nexport class SwitchDefault {\n  constructor(viewContainer: ViewContainer, @Parent() sswitch: Switch) {\n    sswitch._registerViewContainer(_whenDefault, viewContainer);\n  }\n}\n\nvar _whenDefault = new Object();\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)"]}